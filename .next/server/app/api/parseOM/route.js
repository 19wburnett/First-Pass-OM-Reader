"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/parseOM/route";
exports.ids = ["app/api/parseOM/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_westo_OneDrive_Documents_First_Pass_OM_Reader_app_api_parseOM_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/parseOM/route.ts */ \"(rsc)/./app/api/parseOM/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/parseOM/route\",\n        pathname: \"/api/parseOM\",\n        filename: \"route\",\n        bundlePath: \"app/api/parseOM/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\westo\\\\OneDrive\\\\Documents\\\\First Pass OM Reader\\\\app\\\\api\\\\parseOM\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_westo_OneDrive_Documents_First_Pass_OM_Reader_app_api_parseOM_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/parseOM/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXJzZU9NJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwYXJzZU9NJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcGFyc2VPTSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUN3ZXN0byU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDRmlyc3QlMjBQYXNzJTIwT00lMjBSZWFkZXIlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3dlc3RvJTVDT25lRHJpdmUlNUNEb2N1bWVudHMlNUNGaXJzdCUyMFBhc3MlMjBPTSUyMFJlYWRlciZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN3QztBQUNySDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZS11bmRlcndyaXRpbmctYXBwLz81ODA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXHdlc3RvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxGaXJzdCBQYXNzIE9NIFJlYWRlclxcXFxhcHBcXFxcYXBpXFxcXHBhcnNlT01cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3BhcnNlT00vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wYXJzZU9NXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9wYXJzZU9NL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcd2VzdG9cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXEZpcnN0IFBhc3MgT00gUmVhZGVyXFxcXGFwcFxcXFxhcGlcXFxccGFyc2VPTVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wYXJzZU9NL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/parseOM/route.ts":
/*!**********************************!*\
  !*** ./app/api/parseOM/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// Default underwriting assumptions\nconst DEFAULT_ASSUMPTIONS = {\n    vacancy: 0.05,\n    expenseRatio: 0.35,\n    marketCapRate: 0.06,\n    loanToValue: 0.65,\n    interestRate: 0.06,\n    amortizationYears: 30,\n    rentGrowthRate: 0.03,\n    expenseGrowthRate: 0.02,\n    exitCapRate: 0.065\n};\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const pdfFile = formData.get(\"pdf\");\n        if (!pdfFile) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No PDF file provided\"\n            }, {\n                status: 400\n            });\n        }\n        if (pdfFile.type !== \"application/pdf\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"File must be a PDF\"\n            }, {\n                status: 400\n            });\n        }\n        // Convert File to Buffer for pdf-parse\n        const arrayBuffer = await pdfFile.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        // Extract text from PDF\n        const pdfData = await pdf_parse__WEBPACK_IMPORTED_MODULE_1___default()(buffer);\n        const extractedText = pdfData.text;\n        if (!extractedText || extractedText.trim().length === 0) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Could not extract text from PDF\"\n            }, {\n                status: 400\n            });\n        }\n        // Send to OpenAI for analysis\n        const parsedData = await analyzeWithOpenAI(extractedText);\n        // Perform underwriting calculations\n        const dealData = performUnderwritingCalculations(parsedData, DEFAULT_ASSUMPTIONS);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(dealData);\n    } catch (error) {\n        console.error(\"Error processing PDF:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to process PDF\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function analyzeWithOpenAI(text) {\n    const prompt = `\r\nYou are a commercial real estate analyst. Extract the following information from this Offering Memorandum text and return ONLY a valid JSON object with these exact field names:\r\n\r\n{\r\n  \"propertyName\": \"string - name of the property\",\r\n  \"purchasePrice\": number - purchase price in USD (no commas or symbols)\",\r\n  \"units\": number - total number of units\",\r\n  \"occupancy\": number - occupancy rate as decimal (e.g., 0.95 for 95%)\",\r\n  \"avgRent\": number - average monthly rent per unit in USD\",\r\n  \"expenses\": number - annual operating expenses in USD\",\r\n  \"NOI\": number - Net Operating Income in USD\",\r\n  \"marketCapRate\": number - market cap rate as decimal (e.g., 0.06 for 6%)\"\r\n}\r\n\r\nIf any information is missing, use reasonable estimates based on the property type and market. For missing values, use these defaults:\r\n- occupancy: 0.95 (95%)\r\n- marketCapRate: 0.06 (6%)\r\n- expenses: calculate as 35% of potential gross income if not provided\r\n- NOI: calculate as gross income minus expenses if not provided\r\n\r\nText to analyze:\r\n${text.substring(0, 4000)} // Limit text length for API efficiency\r\n`;\n    const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a commercial real estate analyst. Return only valid JSON.\"\n            },\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ],\n        temperature: 0.1,\n        max_tokens: 500\n    });\n    const responseText = completion.choices[0]?.message?.content;\n    if (!responseText) {\n        throw new Error(\"No response from OpenAI\");\n    }\n    try {\n        // Extract JSON from response (handle cases where OpenAI adds extra text)\n        const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            throw new Error(\"No JSON found in OpenAI response\");\n        }\n        const parsedData = JSON.parse(jsonMatch[0]);\n        // Validate required fields\n        if (!parsedData.propertyName || !parsedData.purchasePrice || !parsedData.units || !parsedData.avgRent) {\n            throw new Error(\"Missing required fields in parsed data\");\n        }\n        return parsedData;\n    } catch (parseError) {\n        console.error(\"Failed to parse OpenAI response:\", responseText);\n        throw new Error(\"Failed to parse AI analysis\");\n    }\n}\nfunction performUnderwritingCalculations(parsedData, assumptions) {\n    const { purchasePrice, units, occupancy, avgRent, expenses: parsedExpenses, NOI: parsedNOI, marketCapRate } = parsedData;\n    // Calculate pro forma metrics\n    const grossPotentialIncome = units * avgRent * 12;\n    const vacancy = assumptions.vacancy;\n    const effectiveGrossIncome = grossPotentialIncome * (1 - vacancy);\n    // Use parsed expenses or calculate based on assumption\n    const operatingExpenses = parsedExpenses || effectiveGrossIncome * assumptions.expenseRatio;\n    // Use parsed NOI or calculate\n    const NOI = parsedNOI || effectiveGrossIncome - operatingExpenses;\n    // Cap rate valuation\n    const capRateValuation = NOI / assumptions.marketCapRate;\n    // Financing calculations\n    const loanAmount = purchasePrice * assumptions.loanToValue;\n    const equity = purchasePrice - loanAmount;\n    // Calculate monthly payment for 30-year fixed loan\n    const monthlyRate = assumptions.interestRate / 12;\n    const totalPayments = assumptions.amortizationYears * 12;\n    const debtService = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, totalPayments)) / (Math.pow(1 + monthlyRate, totalPayments) - 1);\n    const annualDebtService = debtService * 12;\n    // Investment metrics\n    const DSCR = NOI / annualDebtService;\n    const cashOnCashReturn = (NOI - annualDebtService) / equity;\n    // 5-year IRR calculation (detailed, Excel-like)\n    const { leveredIRR, unleveredIRR, irrBreakdown } = calculateDetailedIRR(purchasePrice, equity, loanAmount, NOI, annualDebtService, assumptions);\n    // Log the IRR calculation for debugging\n    console.log(\"IRR Calculation Breakdown:\");\n    irrBreakdown.forEach((row)=>{\n        console.log(`Year ${row.year}:`, {\n            NOI: row.NOI,\n            debtService: row.debtService,\n            cashFlowBeforeDebt: row.cashFlowBeforeDebt,\n            cashFlowAfterDebt: row.cashFlowAfterDebt,\n            cumulativeCashFlowBeforeDebt: row.cumulativeCashFlowBeforeDebt,\n            cumulativeCashFlowAfterDebt: row.cumulativeCashFlowAfterDebt,\n            remainingDebt: row.remainingDebt,\n            propertyValue: row.propertyValue,\n            exitEquity: row.exitEquity\n        });\n    });\n    console.log(\"Final IRRs - Levered:\", leveredIRR, \"Unlevered:\", unleveredIRR);\n    return {\n        ...parsedData,\n        grossPotentialIncome,\n        effectiveGrossIncome,\n        operatingExpenses,\n        capRateValuation,\n        debtService: annualDebtService,\n        DSCR,\n        cashOnCashReturn,\n        leveredIRR,\n        unleveredIRR,\n        equity,\n        loanAmount,\n        vacancy,\n        expenseRatio: assumptions.expenseRatio,\n        marketCapRate: assumptions.marketCapRate,\n        irrBreakdown\n    };\n}\nfunction calculateDetailedIRR(purchasePrice, equity, loanAmount, initialNOI, initialDebtService, assumptions) {\n    console.log(\"IRR calculation inputs:\", {\n        purchasePrice,\n        equity,\n        loanAmount,\n        initialNOI,\n        initialDebtService,\n        assumptions\n    });\n    const breakdown = [];\n    let remainingDebt = loanAmount;\n    // Year 0: Initial investment\n    breakdown.push({\n        year: 0,\n        grossIncome: 0,\n        operatingExpenses: 0,\n        NOI: 0,\n        debtService: 0,\n        cashFlowBeforeDebt: 0,\n        cashFlowAfterDebt: -equity,\n        cumulativeCashFlowBeforeDebt: 0,\n        cumulativeCashFlowAfterDebt: -equity,\n        remainingDebt: loanAmount,\n        propertyValue: purchasePrice,\n        exitEquity: 0,\n        totalReturnUnlevered: 0,\n        totalReturnLevered: -equity\n    });\n    // Years 1-5: Operating period\n    for(let year = 1; year <= 5; year++){\n        // Calculate growing income and expenses\n        const rentGrowth = Math.pow(1 + assumptions.rentGrowthRate, year);\n        const expenseGrowth = Math.pow(1 + assumptions.expenseGrowthRate, year);\n        // initialNOI is already the NOI, so we grow it directly\n        const yearNOI = initialNOI * rentGrowth;\n        // For debugging, calculate what the gross income would be\n        const yearGrossIncome = yearNOI / 0.65 // Assuming 35% expense ratio means 65% is NOI\n        ;\n        const yearOperatingExpenses = yearGrossIncome - yearNOI;\n        console.log(`Year ${year} calculations:`, {\n            rentGrowth: rentGrowth.toFixed(4),\n            yearNOI: yearNOI.toFixed(2),\n            yearGrossIncome: yearGrossIncome.toFixed(2),\n            yearOperatingExpenses: yearOperatingExpenses.toFixed(2)\n        });\n        // Debt service remains constant (fixed-rate loan)\n        const yearDebtService = initialDebtService;\n        // Calculate remaining debt (simplified - assumes linear amortization)\n        const annualPrincipal = loanAmount / assumptions.amortizationYears;\n        remainingDebt = Math.max(0, remainingDebt - annualPrincipal);\n        // Cash flows before and after debt\n        const yearCashFlowBeforeDebt = yearNOI;\n        const yearCashFlowAfterDebt = yearNOI - yearDebtService;\n        // Cumulative cash flows\n        const cumulativeCashFlowBeforeDebt = breakdown[year - 1].cumulativeCashFlowBeforeDebt + yearCashFlowBeforeDebt;\n        const cumulativeCashFlowAfterDebt = breakdown[year - 1].cumulativeCashFlowAfterDebt + yearCashFlowAfterDebt;\n        // Property value growth (using cap rate)\n        const yearPropertyValue = yearNOI / assumptions.marketCapRate;\n        // Exit equity (what you'd get if you sold)\n        const exitEquity = yearPropertyValue - remainingDebt;\n        // Total return to date (not used in new structure)\n        // const totalReturn = cumulativeCashFlow + exitEquity\n        breakdown.push({\n            year,\n            grossIncome: yearGrossIncome,\n            operatingExpenses: yearOperatingExpenses,\n            NOI: yearNOI,\n            debtService: yearDebtService,\n            cashFlowBeforeDebt: yearCashFlowBeforeDebt,\n            cashFlowAfterDebt: yearCashFlowAfterDebt,\n            cumulativeCashFlowBeforeDebt,\n            cumulativeCashFlowAfterDebt,\n            remainingDebt,\n            propertyValue: yearPropertyValue,\n            exitEquity,\n            totalReturnUnlevered: cumulativeCashFlowBeforeDebt + exitEquity,\n            totalReturnLevered: cumulativeCashFlowAfterDebt + exitEquity\n        });\n    }\n    // Calculate Levered IRR (with debt) - cash flows after debt service\n    const leveredCashFlows = breakdown.map((row)=>row.cashFlowAfterDebt);\n    leveredCashFlows[0] = -equity // Initial equity investment (negative)\n    ;\n    leveredCashFlows[5] += breakdown[5].exitEquity // Add exit equity to final year\n    ;\n    console.log(\"Levered cash flows for IRR calculation:\", leveredCashFlows);\n    let leveredIRR = calculateIRR(leveredCashFlows);\n    // Validate levered IRR is reasonable (between -50% and +200%)\n    if (leveredIRR < -0.5 || leveredIRR > 2.0) {\n        console.log(\"Levered IRR out of reasonable range, using fallback\");\n        leveredIRR = calculateSimpleIRR(leveredCashFlows, equity);\n    }\n    // Calculate Unlevered IRR (no debt) - cash flows before debt service\n    const unleveredCashFlows = breakdown.map((row)=>row.cashFlowBeforeDebt);\n    unleveredCashFlows[0] = -purchasePrice // Initial property investment (negative)\n    ;\n    unleveredCashFlows[5] += breakdown[5].propertyValue // Add property value to final year\n    ;\n    console.log(\"Unlevered cash flows for IRR calculation:\", unleveredCashFlows);\n    let unleveredIRR = calculateIRR(unleveredCashFlows);\n    // Validate unlevered IRR is reasonable (between -50% and +200%)\n    if (unleveredIRR < -0.5 || unleveredIRR > 2.0) {\n        console.log(\"Unlevered IRR out of reasonable range, using fallback\");\n        unleveredIRR = calculateSimpleIRR(unleveredCashFlows, purchasePrice);\n    }\n    console.log(\"Final validated IRRs - Levered:\", leveredIRR, \"Unlevered:\", unleveredIRR);\n    return {\n        leveredIRR,\n        unleveredIRR,\n        irrBreakdown: breakdown\n    };\n}\nfunction calculateIRR(cashFlows) {\n    // Newton-Raphson method for IRR calculation\n    let guess = 0.15 // Start with 15% guess\n    ;\n    const tolerance = 0.0001;\n    const maxIterations = 100;\n    console.log(\"Starting IRR calculation with cash flows:\", cashFlows);\n    console.log(\"Initial guess:\", guess);\n    for(let i = 0; i < maxIterations; i++){\n        const npv = calculateNPV(cashFlows, guess);\n        const derivative = calculateNPVDerivative(cashFlows, guess);\n        console.log(`Iteration ${i + 1}: guess=${guess.toFixed(6)}, npv=${npv.toFixed(2)}, derivative=${derivative.toFixed(6)}`);\n        if (Math.abs(derivative) < 0.0001) {\n            console.log(\"Derivative too small, breaking\");\n            break;\n        }\n        const newGuess = guess - npv / derivative;\n        // Prevent extreme values\n        if (newGuess < -0.99 || newGuess > 10) {\n            console.log(\"Guess out of reasonable range, using fallback\");\n            return 0.15 // Fallback to 15%\n            ;\n        }\n        if (Math.abs(newGuess - guess) < tolerance) {\n            console.log(\"Converged to IRR:\", newGuess);\n            return newGuess;\n        }\n        guess = newGuess;\n    }\n    console.log(\"Max iterations reached, returning guess:\", guess);\n    return guess;\n}\nfunction calculateNPV(cashFlows, rate) {\n    let npv = 0;\n    for(let i = 0; i < cashFlows.length; i++){\n        npv += cashFlows[i] / Math.pow(1 + rate, i);\n    }\n    return npv;\n}\nfunction calculateNPVDerivative(cashFlows, rate) {\n    let derivative = 0;\n    for(let i = 1; i < cashFlows.length; i++){\n        derivative -= i * cashFlows[i] / Math.pow(1 + rate, i + 1);\n    }\n    return derivative;\n}\nfunction calculateSimpleIRR(cashFlows, equity) {\n    // Simple IRR approximation based on total return\n    const totalCashFlow = cashFlows.reduce((sum, cf)=>sum + cf, 0);\n    const totalReturn = totalCashFlow + equity;\n    if (totalReturn <= 0) {\n        return 0.05 // 5% if no positive return\n        ;\n    }\n    // Simple approximation: assume average return over 5 years\n    const avgAnnualReturn = totalReturn / 5;\n    const simpleIRR = avgAnnualReturn / equity;\n    // Cap at reasonable levels\n    return Math.min(Math.max(simpleIRR, 0.05), 0.30);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/parseOM/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();