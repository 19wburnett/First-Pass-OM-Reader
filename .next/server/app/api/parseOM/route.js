"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/parseOM/route";
exports.ids = ["app/api/parseOM/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_westo_OneDrive_Documents_First_Pass_OM_Reader_app_api_parseOM_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/parseOM/route.ts */ \"(rsc)/./app/api/parseOM/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/parseOM/route\",\n        pathname: \"/api/parseOM\",\n        filename: \"route\",\n        bundlePath: \"app/api/parseOM/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\westo\\\\OneDrive\\\\Documents\\\\First Pass OM Reader\\\\app\\\\api\\\\parseOM\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_westo_OneDrive_Documents_First_Pass_OM_Reader_app_api_parseOM_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/parseOM/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXJzZU9NJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwYXJzZU9NJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcGFyc2VPTSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUN3ZXN0byU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDRmlyc3QlMjBQYXNzJTIwT00lMjBSZWFkZXIlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3dlc3RvJTVDT25lRHJpdmUlNUNEb2N1bWVudHMlNUNGaXJzdCUyMFBhc3MlMjBPTSUyMFJlYWRlciZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN3QztBQUNySDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZS11bmRlcndyaXRpbmctYXBwLz81ODA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXHdlc3RvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxGaXJzdCBQYXNzIE9NIFJlYWRlclxcXFxhcHBcXFxcYXBpXFxcXHBhcnNlT01cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3BhcnNlT00vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wYXJzZU9NXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9wYXJzZU9NL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcd2VzdG9cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXEZpcnN0IFBhc3MgT00gUmVhZGVyXFxcXGFwcFxcXFxhcGlcXFxccGFyc2VPTVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wYXJzZU9NL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/parseOM/route.ts":
/*!**********************************!*\
  !*** ./app/api/parseOM/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xlsx */ \"(rsc)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"(rsc)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function parseRentRollFromUrl(url) {\n    try {\n        // Fetch file from Supabase URL\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch rent roll file: ${response.statusText}`);\n        }\n        const arrayBuffer = await response.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        let data = [];\n        // Determine file type from URL extension\n        if (url.includes(\".csv\")) {\n            // Parse CSV\n            const csvText = buffer.toString(\"utf-8\");\n            const result = papaparse__WEBPACK_IMPORTED_MODULE_2___default().parse(csvText, {\n                header: true,\n                skipEmptyLines: true\n            });\n            data = result.data;\n        } else {\n            // Parse Excel\n            const workbook = xlsx__WEBPACK_IMPORTED_MODULE_4__.read(buffer, {\n                type: \"buffer\"\n            });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            data = xlsx__WEBPACK_IMPORTED_MODULE_4__.utils.sheet_to_json(worksheet);\n        }\n        console.log(\"Raw rent roll data:\", data);\n        if (data.length === 0) {\n            throw new Error(\"No data found in rent roll file\");\n        }\n        // Process the data to extract rent roll information\n        let totalUnits = 0;\n        let occupiedUnits = 0;\n        let vacantUnits = 0;\n        let totalMonthlyRent = 0;\n        const units = [];\n        console.log(\"Processing rent roll rows:\", data.length);\n        // First, try to identify the structure by looking for summary rows\n        let summaryRow = null;\n        // Look for the actual totals row - check multiple possible formats\n        for (const row of data){\n            const rentRollCol = row[\"Rent Roll with Lease Charges\"];\n            if (rentRollCol && (rentRollCol === \"Totals:\" || rentRollCol === \"Total:\" || rentRollCol === \"TOTALS:\" || rentRollCol === \"TOTAL:\")) {\n                summaryRow = row;\n                console.log(\"Found totals row:\", row);\n                break;\n            }\n        }\n        // If we didn't find totals, look for the row with the highest unit count\n        if (!summaryRow) {\n            console.log(\"No totals row found, looking for row with highest unit count...\");\n            let maxUnits = 0;\n            for (const row of data){\n                const unitsStr = row[\"__EMPTY_9\"];\n                if (unitsStr && !isNaN(parseFloat(unitsStr))) {\n                    const units = parseInt(unitsStr);\n                    if (units > maxUnits && units > 100) {\n                        maxUnits = units;\n                        summaryRow = row;\n                    }\n                }\n            }\n            if (summaryRow) {\n                console.log(\"Found row with highest unit count:\", summaryRow);\n            }\n        }\n        // If still no summary row, look for any row with substantial units\n        if (!summaryRow) {\n            console.log(\"Still no summary row, looking for any substantial unit count...\");\n            for (const row of data){\n                const unitsStr = row[\"__EMPTY_9\"];\n                if (unitsStr && !isNaN(parseFloat(unitsStr))) {\n                    const units = parseInt(unitsStr);\n                    if (units > 200) {\n                        summaryRow = row;\n                        console.log(\"Found substantial unit count row:\", row);\n                        break;\n                    }\n                }\n            }\n        }\n        if (summaryRow) {\n            console.log(\"Found summary row:\", summaryRow);\n            // Extract totals from summary row - these are the actual property totals\n            const totalUnitsStr = summaryRow[\"__EMPTY_9\"] || summaryRow[\"# Of\"] || summaryRow[\"Units\"];\n            const totalRentStr = summaryRow[\"__EMPTY_4\"] || summaryRow[\"Market\"] || summaryRow[\"Rent\"] // Use __EMPTY_4 for monthly rent\n            ;\n            if (totalUnitsStr && !isNaN(parseFloat(totalUnitsStr))) {\n                totalUnits = parseInt(totalUnitsStr);\n                console.log(\"Extracted total units from summary:\", totalUnits);\n            }\n            if (totalRentStr && !isNaN(parseFloat(totalRentStr))) {\n                // __EMPTY_4 appears to be monthly rent, not annual\n                totalMonthlyRent = parseFloat(totalRentStr);\n                console.log(\"Extracted total monthly rent from summary:\", totalMonthlyRent);\n            }\n            // Look for occupancy information\n            const occupancyStr = summaryRow[\"__EMPTY_10\"] || summaryRow[\"% Unit\"] || summaryRow[\"Occupancy\"];\n            if (occupancyStr && !isNaN(parseFloat(occupancyStr))) {\n                const occupancyPercent = parseFloat(occupancyStr) / 100;\n                occupiedUnits = Math.round(totalUnits * occupancyPercent);\n                vacantUnits = totalUnits - occupiedUnits;\n                console.log(\"Extracted occupancy from summary:\", occupancyPercent, \"occupied:\", occupiedUnits, \"vacant:\", vacantUnits);\n            }\n        }\n        const occupancyRate = totalUnits > 0 ? occupiedUnits / totalUnits : 0;\n        const averageMonthlyRent = totalUnits > 0 ? totalMonthlyRent / totalUnits : 0;\n        const rentRollData = {\n            totalUnits,\n            occupiedUnits,\n            vacantUnits,\n            totalMonthlyRent,\n            averageMonthlyRent,\n            occupancyRate,\n            units\n        };\n        console.log(\"Processed rent roll data:\", rentRollData);\n        return rentRollData;\n    } catch (error) {\n        console.error(\"Error parsing rent roll:\", error);\n        throw new Error(`Failed to parse rent roll: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n// Default underwriting assumptions\nconst DEFAULT_ASSUMPTIONS = {\n    vacancy: 0.05,\n    expenseRatio: 0.35,\n    marketCapRate: 0.06,\n    loanToValue: 0.65,\n    interestRate: 0.06,\n    amortizationYears: 30,\n    rentGrowthRate: 0.03,\n    expenseGrowthRate: 0.02,\n    exitCapRate: 0.065,\n    analysisTerm: 5 // 5-year analysis by default\n};\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { omFileUrl, rentRollFileUrl, userAssumptions } = body;\n        if (!omFileUrl) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No OM file URL provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Fetch PDF from Supabase URL\n        const pdfResponse = await fetch(omFileUrl);\n        if (!pdfResponse.ok) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Failed to fetch OM file from storage\"\n            }, {\n                status: 400\n            });\n        }\n        // Convert response to Buffer for pdf-parse\n        const pdfArrayBuffer = await pdfResponse.arrayBuffer();\n        const pdfBuffer = Buffer.from(pdfArrayBuffer);\n        // Extract text from PDF\n        const pdfData = await pdf_parse__WEBPACK_IMPORTED_MODULE_1___default()(pdfBuffer);\n        const extractedText = pdfData.text;\n        if (!extractedText || extractedText.trim().length === 0) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Could not extract text from PDF\"\n            }, {\n                status: 400\n            });\n        }\n        // Skip rent roll processing for now - focus on OM analysis only\n        let rentRollData;\n        console.log(\"Skipping rent roll processing - focusing on OM analysis only\");\n        // Send to OpenAI for analysis (rent roll data is now included in the response)\n        const parsedData = await analyzeWithOpenAI(extractedText, rentRollData);\n        console.log(\"Parsed data from OpenAI with rent roll:\", {\n            hasRentRollData: !!parsedData.rentRollData,\n            rentRollUnits: parsedData.rentRollData?.totalUnits,\n            rentRollMonthlyRent: parsedData.rentRollData?.totalMonthlyRent\n        });\n        // Merge user assumptions with defaults\n        const finalAssumptions = {\n            ...DEFAULT_ASSUMPTIONS,\n            ...userAssumptions && {\n                marketCapRate: userAssumptions.defaultCapRate,\n                exitCapRate: userAssumptions.exitCapRate,\n                loanToValue: userAssumptions.loanToValue,\n                interestRate: userAssumptions.interestRate,\n                analysisTerm: userAssumptions.analysisTerm\n            }\n        };\n        console.log(\"Using assumptions:\", {\n            default: DEFAULT_ASSUMPTIONS,\n            user: userAssumptions,\n            final: finalAssumptions\n        });\n        // Perform underwriting calculations\n        const dealData = performUnderwritingCalculations(parsedData, finalAssumptions);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(dealData);\n    } catch (error) {\n        console.error(\"Error processing PDF:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to process PDF\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function analyzeWithOpenAI(text, rentRollData) {\n    const prompt = `\nYou are a commercial real estate analyst. Focus on analyzing the Offering Memorandum text to extract comprehensive financial data.\n\nOM ANALYSIS:\nExtract the following information from the Offering Memorandum text and return ONLY a valid JSON object with these exact field names:\n\n{\n  \"propertyName\": \"string - name of the property\",\n  \"whisperPrice\": number - asking price or suggested price mentioned in the OM in USD (no commas or symbols). If no price is mentioned, use null,\n  \"units\": number - total number of units. Look for total units, apartments, or residential units mentioned in the OM,\n  \"occupancy\": number - occupancy rate as decimal (e.g., 0.95 for 95%). Look for occupancy rates mentioned in the OM,\n  \"avgRent\": number - average monthly rent per unit in USD. Look for 'average rent', 'monthly rent', 'rent per unit', or similar terms. If you see total annual income, divide by (units × 12) to get monthly rent per unit,\n  \"expenses\": number - annual operating expenses in USD. PRIORITY: Look for T-12 (Trailing 12 months) data, Proforma operating expenses, or annual expense figures. If not found, calculate as 35% of gross income.,\n  \"NOI\": number - Net Operating Income in USD. PRIORITY: Look for T-12 NOI, Proforma NOI, or actual NOI figures. If not found, calculate as gross income minus expenses.,\n  \"marketCapRate\": number - market cap rate as decimal (e.g., 0.06 for 6%)\n}\n\nCRITICAL: You MUST find and read the T-12 section in ORDER to understand the financial structure. Look for this exact sequence:\n\n1. \"T-12\" or \"Trailing 12 Months\" section (HIGHEST PRIORITY)\n2. Read the T-12 page from TOP to BOTTOM in this EXACT order:\n   - Look for \"GROSS POTENTIAL RENTAL INCOME\" (this is your gross income)\n   - Look for \"TOTAL OPERATING EXPENSES\" (this is your expenses)\n   - Look for \"NET OPERATING INCOME\" (this is your NOI)\n\n3. \"Income Statement\" or \"Financial Summary\" - for revenue/expense breakdown\n4. \"Operating Expenses\" or \"Expense Analysis\" - for cost details\n\nSPECIFICALLY LOOK FOR:\n- \"T-12\" sections (NOT \"YEAR 1\")\n- Read the T-12 page sequentially to understand the flow\n- Look for the actual numbers in the T-12 columns, not projections\n\nFOCUS ON THESE THREE KEY METRICS IN ORDER:\n1. \"GROSS POTENTIAL RENTAL INCOME\" - the total rental revenue\n2. \"TOTAL OPERATING EXPENSES\" - all operating costs\n3. \"NET OPERATING INCOME\" - the final NOI (gross income minus expenses)\n\nPRIORITY ORDER:\n1. FIRST: Use T-12 ACTUAL data (most accurate for current performance)\n2. SECOND: Use T-1 RENTAL INCOME data\n3. THIRD: Use any other current financial data found in the OM\n4. LAST: Only use YEAR 1 PROFORMA if no actual data exists\n\nREADING INSTRUCTIONS:\n- When you find the T-12 section, read it from TOP to BOTTOM\n- Look for the T-12 column (usually the leftmost column with actual numbers)\n- The T-12 column contains the ACTUAL current performance\n- The YEAR 1 column contains PROJECTIONS (ignore this for now)\n- Focus on reading the T-12 numbers in sequence to understand the financial flow\n\nThe T-12 ACTUAL data contains the most accurate current financial performance and should be your primary source for expenses, NOI, and rent projections.\n\nIf any information is missing, use reasonable estimates based on the property type and market. For missing values, use these defaults:\n- occupancy: 0.95 (95%)\n- marketCapRate: 0.06 (6%)\n- expenses: calculate as 35% of potential gross income if not provided\n- NOI: calculate as gross income minus expenses if not provided\n\nText to analyze:\n${text} // Full OM text for complete Proforma T-12 analysis\n`;\n    const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a commercial real estate analyst who focuses on extracting comprehensive financial data from Offering Memorandums. You MUST return ONLY valid JSON with proper quotes around all property names and string values. Numbers should be unquoted. Do not include any explanatory text before or after the JSON.\"\n            },\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ],\n        temperature: 0.1,\n        max_tokens: 500\n    });\n    const responseText = completion.choices[0]?.message?.content;\n    if (!responseText) {\n        throw new Error(\"No response from OpenAI\");\n    }\n    try {\n        // Extract JSON from response (handle cases where OpenAI adds extra text)\n        const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            throw new Error(\"No JSON found in OpenAI response\");\n        }\n        let jsonText = jsonMatch[0];\n        console.log(\"Extracted JSON text:\", jsonText);\n        // Try to clean up common JSON formatting issues\n        jsonText = jsonText.replace(/(\\w+):/g, '\"$1\":') // Add quotes around property names\n        .replace(/:\\s*([^\",\\{\\}\\[\\]]+)(?=\\s*[,}\\s])/g, ': \"$1\"') // Add quotes around string values\n        .replace(/:\\s*null(?=\\s*[,}\\s])/g, \": null\") // Keep null as null\n        .replace(/:\\s*(\\d+\\.?\\d*)(?=\\s*[,}\\s])/g, \": $1\") // Keep numbers as numbers\n        ;\n        console.log(\"Cleaned JSON text:\", jsonText);\n        let parsedData;\n        try {\n            parsedData = JSON.parse(jsonText);\n        } catch (cleanError) {\n            console.log(\"Failed to parse cleaned JSON, trying original:\", cleanError instanceof Error ? cleanError.message : \"Unknown error\");\n            // Fall back to original JSON parsing\n            parsedData = JSON.parse(jsonMatch[0]);\n        }\n        // Handle backward compatibility and field name variations\n        if (parsedData.purchasePrice !== undefined && parsedData.whisperPrice === undefined) {\n            console.log(\"AI returned purchasePrice, converting to whisperPrice for backward compatibility\");\n            parsedData.whisperPrice = parsedData.purchasePrice;\n            delete parsedData.purchasePrice;\n        }\n        // Handle other possible field name variations\n        if (parsedData.property_name !== undefined && !parsedData.propertyName) {\n            parsedData.propertyName = parsedData.property_name;\n            delete parsedData.property_name;\n        }\n        if (parsedData.avg_rent !== undefined && !parsedData.avgRent) {\n            parsedData.avgRent = parsedData.avg_rent;\n            delete parsedData.avg_rent;\n        }\n        if (parsedData.market_cap_rate !== undefined && !parsedData.marketCapRate) {\n            parsedData.marketCapRate = parsedData.market_cap_rate;\n            delete parsedData.market_cap_rate;\n        }\n        // Log the full response for debugging\n        console.log(\"Raw AI response:\", responseText);\n        console.log(\"Parsed data:\", parsedData);\n        // Validate required fields with detailed logging and provide defaults\n        const missingFields = [];\n        if (!parsedData.propertyName) missingFields.push(\"propertyName\");\n        if (!parsedData.units) missingFields.push(\"units\");\n        if (!parsedData.avgRent) missingFields.push(\"avgRent\");\n        if (missingFields.length > 0) {\n            console.error(\"Missing required fields:\", missingFields);\n            console.error(\"Available fields:\", Object.keys(parsedData));\n            console.error(\"Field values:\", parsedData);\n            // Provide reasonable defaults for missing fields\n            if (!parsedData.propertyName) parsedData.propertyName = \"Unknown Property\";\n            if (!parsedData.units) parsedData.units = 100 // Default to 100 units\n            ;\n            if (!parsedData.avgRent) parsedData.avgRent = 1500 // Default to $1,500/month\n            ;\n            console.log(\"Applied default values for missing fields:\", parsedData);\n        } else {\n            console.log(\"All required fields successfully extracted from OM\");\n        }\n        // Log the final values that will be used for calculations\n        const expectedGPI = parsedData.units * parsedData.avgRent * 12;\n        console.log(\"Final values for calculations:\", {\n            units: parsedData.units,\n            avgRent: parsedData.avgRent,\n            expectedGPI,\n            whisperPrice: parsedData.whisperPrice,\n            expenses: parsedData.expenses,\n            NOI: parsedData.NOI,\n            marketCapRate: parsedData.marketCapRate\n        });\n        // Validate that avgRent makes sense\n        if (parsedData.avgRent === 1500) {\n            console.warn(\"⚠️ WARNING: AI extracted default avgRent of $1,500. This might be wrong!\");\n            console.warn(\"If your OM shows different rent information, the AI failed to extract it correctly.\");\n        }\n        // Validate that the calculated GPI makes sense\n        if (expectedGPI > 1000000) {\n            console.warn(\"⚠️ WARNING: Calculated GPI seems very high. AI might have extracted wrong rent or units.\");\n        }\n        console.log(\"Successfully parsed AI response:\", parsedData);\n        // Include rent roll data in the returned data\n        const enhancedParsedData = {\n            ...parsedData,\n            rentRollData\n        };\n        console.log(\"Enhanced parsed data with rent roll:\", {\n            hasRentRollData: !!enhancedParsedData.rentRollData,\n            rentRollUnits: enhancedParsedData.rentRollData?.totalUnits,\n            rentRollMonthlyRent: enhancedParsedData.rentRollData?.totalMonthlyRent\n        });\n        return enhancedParsedData;\n    } catch (parseError) {\n        console.error(\"Failed to parse OpenAI response:\", responseText);\n        console.error(\"Parse error:\", parseError);\n        // Try to extract any useful information from the response\n        if (responseText.includes(\"property\") || responseText.includes(\"rent\") || responseText.includes(\"units\")) {\n            console.log(\"Response contains some property information, attempting to extract...\");\n        // You could add more sophisticated parsing here if needed\n        }\n        throw new Error(`Failed to parse AI analysis: ${parseError instanceof Error ? parseError.message : \"Unknown error\"}`);\n    }\n}\nfunction performUnderwritingCalculations(parsedData, assumptions) {\n    const { whisperPrice, units, occupancy, avgRent, expenses: parsedExpenses, NOI: parsedNOI, marketCapRate, rentRollData } = parsedData;\n    // Use rent roll data if available, otherwise use OM data\n    const finalUnits = rentRollData ? rentRollData.totalUnits : units;\n    const finalOccupancy = rentRollData ? rentRollData.occupancyRate : occupancy;\n    const finalAvgRent = rentRollData ? rentRollData.averageMonthlyRent : avgRent;\n    console.log(\"Final values for calculations:\", {\n        rentRollData: !!rentRollData,\n        rentRollDataDetails: rentRollData ? {\n            totalUnits: rentRollData.totalUnits,\n            totalMonthlyRent: rentRollData.totalMonthlyRent,\n            occupancyRate: rentRollData.occupancyRate\n        } : null,\n        finalUnits,\n        finalOccupancy,\n        finalAvgRent,\n        originalUnits: units,\n        originalOccupancy: occupancy,\n        originalAvgRent: avgRent\n    });\n    // Calculate pro forma metrics\n    console.log(\"Pro forma calculation inputs:\", {\n        finalUnits,\n        finalAvgRent,\n        finalOccupancy,\n        parsedExpenses,\n        parsedNOI,\n        marketCapRate\n    });\n    const grossPotentialIncome = finalUnits * finalAvgRent * 12;\n    const vacancy = finalOccupancy // Use actual occupancy from rent roll if available\n    ;\n    const effectiveGrossIncome = grossPotentialIncome * (1 - vacancy);\n    // If we have rent roll data, calculate NOI from scratch\n    let finalNOI = parsedNOI;\n    if (rentRollData && rentRollData.totalUnits > 0) {\n        // Calculate NOI based on rent roll data\n        const annualRent = rentRollData.totalMonthlyRent * 12;\n        const vacancyLoss = annualRent * (1 - rentRollData.occupancyRate);\n        const effectiveGrossIncome = annualRent - vacancyLoss;\n        const operatingExpenses = effectiveGrossIncome * assumptions.expenseRatio;\n        finalNOI = effectiveGrossIncome - operatingExpenses;\n        console.log(\"Calculated NOI from rent roll:\", {\n            annualRent,\n            vacancyLoss,\n            effectiveGrossIncome,\n            operatingExpenses,\n            finalNOI\n        });\n    }\n    // Ensure we have a valid NOI\n    if (!finalNOI || finalNOI <= 0) {\n        console.log(\"⚠️ WARNING: Invalid NOI detected, using fallback calculation\");\n        finalNOI = effectiveGrossIncome * (1 - assumptions.expenseRatio);\n        console.log(\"Fallback NOI calculated:\", finalNOI);\n    }\n    console.log(\"Pro forma calculations:\", {\n        grossPotentialIncome,\n        vacancy,\n        effectiveGrossIncome\n    });\n    // Use parsed expenses or calculate based on assumption\n    const operatingExpenses = parsedExpenses || effectiveGrossIncome * assumptions.expenseRatio;\n    // Use the calculated finalNOI (from rent roll if available) instead of parsed NOI\n    const NOI = finalNOI;\n    // Calculate purchase price using cap rate and NOI (this is the \"market value\")\n    const purchasePrice = NOI / assumptions.marketCapRate;\n    // Calculate price difference (whisper price - calculated price)\n    const priceDifference = whisperPrice && whisperPrice > 0 ? whisperPrice - purchasePrice : 0;\n    // Cap rate valuation (same as purchase price)\n    const capRateValuation = purchasePrice;\n    console.log(\"Pricing calculations:\", {\n        whisperPrice,\n        originalParsedNOI: parsedNOI,\n        calculatedFinalNOI: finalNOI,\n        finalNOIUsed: NOI,\n        marketCapRate: assumptions.marketCapRate,\n        calculatedPurchasePrice: purchasePrice,\n        priceDifference\n    });\n    // Financing calculations\n    const loanAmount = purchasePrice * assumptions.loanToValue;\n    const equity = purchasePrice - loanAmount;\n    // Calculate monthly payment for 30-year fixed loan\n    const monthlyRate = assumptions.interestRate / 12;\n    const totalPayments = assumptions.amortizationYears * 12;\n    const debtService = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, totalPayments)) / (Math.pow(1 + monthlyRate, totalPayments) - 1);\n    const annualDebtService = debtService * 12;\n    // Investment metrics\n    const DSCR = NOI / annualDebtService;\n    const cashOnCashReturn = (NOI - annualDebtService) / equity;\n    // Dynamic-term IRR calculation (detailed, Excel-like)\n    const { leveredIRR, unleveredIRR, irrBreakdown } = calculateDetailedIRR(purchasePrice, equity, loanAmount, NOI, annualDebtService, assumptions, rentRollData // Pass rent roll data for accurate calculations\n    );\n    // Log the IRR calculation for debugging\n    console.log(\"IRR Calculation Breakdown:\");\n    irrBreakdown.forEach((row)=>{\n        console.log(`Year ${row.year}:`, {\n            NOI: row.NOI,\n            debtService: row.debtService,\n            cashFlowBeforeDebt: row.cashFlowBeforeDebt,\n            cashFlowAfterDebt: row.cashFlowAfterDebt,\n            cumulativeCashFlowBeforeDebt: row.cumulativeCashFlowBeforeDebt,\n            cumulativeCashFlowAfterDebt: row.cumulativeCashFlowAfterDebt,\n            remainingDebt: row.remainingDebt,\n            propertyValue: row.propertyValue,\n            exitEquity: row.exitEquity\n        });\n    });\n    console.log(\"Final IRRs - Levered:\", leveredIRR, \"Unlevered:\", unleveredIRR);\n    const finalDealData = {\n        ...parsedData,\n        units: finalUnits,\n        occupancy: finalOccupancy,\n        avgRent: finalAvgRent,\n        NOI: finalNOI,\n        purchasePrice,\n        priceDifference,\n        grossPotentialIncome,\n        effectiveGrossIncome,\n        operatingExpenses,\n        capRateValuation,\n        debtService: annualDebtService,\n        DSCR,\n        cashOnCashReturn,\n        leveredIRR,\n        unleveredIRR,\n        equity,\n        loanAmount,\n        vacancy,\n        expenseRatio: assumptions.expenseRatio,\n        marketCapRate: assumptions.marketCapRate,\n        irrBreakdown,\n        rentRollData\n    };\n    console.log(\"Final deal data being returned:\", {\n        units: finalDealData.units,\n        occupancy: finalDealData.occupancy,\n        avgRent: finalDealData.avgRent,\n        NOI: finalDealData.NOI,\n        rentRollData: !!finalDealData.rentRollData\n    });\n    return finalDealData;\n}\nfunction calculateDetailedIRR(purchasePrice, equity, loanAmount, initialNOI, initialDebtService, assumptions, rentRollData) {\n    console.log(\"IRR calculation inputs:\", {\n        purchasePrice,\n        equity,\n        loanAmount,\n        initialNOI,\n        initialDebtService,\n        assumptions\n    });\n    const breakdown = [];\n    let remainingDebt = loanAmount;\n    // Year 0: Initial investment\n    breakdown.push({\n        year: 0,\n        grossIncome: 0,\n        operatingExpenses: 0,\n        NOI: 0,\n        debtService: 0,\n        cashFlowBeforeDebt: 0,\n        cashFlowAfterDebt: -equity,\n        cumulativeCashFlowBeforeDebt: 0,\n        cumulativeCashFlowAfterDebt: -equity,\n        remainingDebt: loanAmount,\n        propertyValue: purchasePrice,\n        exitEquity: 0,\n        totalReturnUnlevered: 0,\n        totalReturnLevered: -equity,\n        annualCashOnCash: 0\n    });\n    // Years 1 to analysisTerm: Operating period\n    for(let year = 1; year <= assumptions.analysisTerm; year++){\n        // Calculate growing income and expenses\n        const rentGrowth = Math.pow(1 + assumptions.rentGrowthRate, year);\n        const expenseGrowth = Math.pow(1 + assumptions.expenseGrowthRate, year);\n        // Use rent roll data if available for accurate gross income\n        let yearGrossIncome;\n        let yearOperatingExpenses;\n        let yearNOI;\n        if (rentRollData && rentRollData.totalUnits > 0) {\n            // Calculate from actual rent roll data\n            const baseAnnualRent = rentRollData.totalMonthlyRent * 12;\n            yearGrossIncome = baseAnnualRent * rentGrowth;\n            yearOperatingExpenses = yearGrossIncome * assumptions.expenseRatio;\n            yearNOI = yearGrossIncome - yearOperatingExpenses;\n        } else {\n            // Fallback to NOI-based calculation\n            yearNOI = initialNOI * rentGrowth;\n            yearGrossIncome = yearNOI / (1 - assumptions.expenseRatio);\n            yearOperatingExpenses = yearGrossIncome - yearNOI;\n        }\n        console.log(`Year ${year} calculations:`, {\n            rentGrowth: rentGrowth.toFixed(4),\n            yearNOI: yearNOI.toFixed(2),\n            yearGrossIncome: yearGrossIncome.toFixed(2),\n            yearOperatingExpenses: yearOperatingExpenses.toFixed(2)\n        });\n        // Debt service remains constant (fixed-rate loan)\n        const yearDebtService = initialDebtService;\n        // Calculate remaining debt (simplified - assumes linear amortization)\n        const annualPrincipal = loanAmount / assumptions.amortizationYears;\n        remainingDebt = Math.max(0, remainingDebt - annualPrincipal);\n        // Cash flows before and after debt\n        const yearCashFlowBeforeDebt = yearNOI;\n        const yearCashFlowAfterDebt = yearNOI - yearDebtService;\n        // Cumulative cash flows\n        const cumulativeCashFlowBeforeDebt = breakdown[year - 1].cumulativeCashFlowBeforeDebt + yearCashFlowBeforeDebt;\n        const cumulativeCashFlowAfterDebt = breakdown[year - 1].cumulativeCashFlowAfterDebt + yearCashFlowAfterDebt;\n        // Property value growth (using cap rate)\n        const yearPropertyValue = year === assumptions.analysisTerm ? yearNOI / assumptions.exitCapRate : yearNOI / assumptions.marketCapRate // Use market cap rate for intermediate years\n        ;\n        // Exit equity (what you'd get if you sold)\n        const exitEquity = year === assumptions.analysisTerm ? yearPropertyValue - remainingDebt : 0;\n        // Total return to date (not used in new structure)\n        // const totalReturn = cumulativeCashFlow + exitEquity\n        // Calculate annual cash-on-cash return (Year 1-5 only, not Year 0)\n        const annualCashOnCash = year === 0 ? 0 : yearCashFlowAfterDebt / equity;\n        breakdown.push({\n            year,\n            grossIncome: yearGrossIncome,\n            operatingExpenses: yearOperatingExpenses,\n            NOI: yearNOI,\n            debtService: yearDebtService,\n            cashFlowBeforeDebt: yearCashFlowBeforeDebt,\n            cashFlowAfterDebt: yearCashFlowAfterDebt,\n            cumulativeCashFlowBeforeDebt,\n            cumulativeCashFlowAfterDebt,\n            remainingDebt,\n            propertyValue: yearPropertyValue,\n            exitEquity,\n            totalReturnUnlevered: cumulativeCashFlowBeforeDebt + exitEquity,\n            totalReturnLevered: cumulativeCashFlowAfterDebt + exitEquity,\n            annualCashOnCash\n        });\n    }\n    // Calculate Levered IRR (with debt) - cash flows after debt service\n    const leveredCashFlows = breakdown.map((row)=>row.cashFlowAfterDebt);\n    leveredCashFlows[0] = -equity // Initial equity investment (negative)\n    ;\n    leveredCashFlows[assumptions.analysisTerm] += breakdown[assumptions.analysisTerm].propertyValue - breakdown[assumptions.analysisTerm].remainingDebt // Add net sale proceeds to final year\n    ;\n    console.log(\"Levered cash flows for IRR calculation:\", leveredCashFlows);\n    let leveredIRR = calculateIRR(leveredCashFlows);\n    // Validate levered IRR is reasonable (between -50% and +200%)\n    if (leveredIRR < -0.5 || leveredIRR > 2.0) {\n        console.log(\"Levered IRR out of reasonable range, using fallback\");\n        leveredIRR = calculateSimpleIRR(leveredCashFlows, equity, assumptions.analysisTerm);\n    }\n    // Calculate Unlevered IRR (no debt) - cash flows before debt service\n    const unleveredCashFlows = breakdown.map((row)=>row.cashFlowBeforeDebt);\n    unleveredCashFlows[0] = -purchasePrice // Initial property investment (negative)\n    ;\n    unleveredCashFlows[assumptions.analysisTerm] += breakdown[assumptions.analysisTerm].propertyValue // Add full property sale value to final year\n    ;\n    console.log(\"Unlevered cash flows for IRR calculation:\", unleveredCashFlows);\n    let unleveredIRR = calculateIRR(unleveredCashFlows);\n    // Validate unlevered IRR is reasonable (between -50% and +200%)\n    if (unleveredIRR < -0.5 || unleveredIRR > 2.0) {\n        console.log(\"Unlevered IRR out of reasonable range, using fallback\");\n        unleveredIRR = calculateSimpleIRR(unleveredCashFlows, purchasePrice, assumptions.analysisTerm);\n    }\n    console.log(\"Final validated IRRs - Levered:\", leveredIRR, \"Unlevered:\", unleveredIRR);\n    return {\n        leveredIRR,\n        unleveredIRR,\n        irrBreakdown: breakdown\n    };\n}\nfunction calculateIRR(cashFlows) {\n    // Newton-Raphson method for IRR calculation\n    let guess = 0.15 // Start with 15% guess\n    ;\n    const tolerance = 0.0001;\n    const maxIterations = 100;\n    console.log(\"Starting IRR calculation with cash flows:\", cashFlows);\n    console.log(\"Initial guess:\", guess);\n    for(let i = 0; i < maxIterations; i++){\n        const npv = calculateNPV(cashFlows, guess);\n        const derivative = calculateNPVDerivative(cashFlows, guess);\n        console.log(`Iteration ${i + 1}: guess=${guess.toFixed(6)}, npv=${npv.toFixed(2)}, derivative=${derivative.toFixed(6)}`);\n        if (Math.abs(derivative) < 0.0001) {\n            console.log(\"Derivative too small, breaking\");\n            break;\n        }\n        const newGuess = guess - npv / derivative;\n        // Prevent extreme values\n        if (newGuess < -0.99 || newGuess > 10) {\n            console.log(\"Guess out of reasonable range, using fallback\");\n            return 0.15 // Fallback to 15%\n            ;\n        }\n        if (Math.abs(newGuess - guess) < tolerance) {\n            console.log(\"Converged to IRR:\", newGuess);\n            return newGuess;\n        }\n        guess = newGuess;\n    }\n    console.log(\"Max iterations reached, returning guess:\", guess);\n    return guess;\n}\nfunction calculateNPV(cashFlows, rate) {\n    let npv = 0;\n    for(let i = 0; i < cashFlows.length; i++){\n        npv += cashFlows[i] / Math.pow(1 + rate, i);\n    }\n    return npv;\n}\nfunction calculateNPVDerivative(cashFlows, rate) {\n    let derivative = 0;\n    for(let i = 1; i < cashFlows.length; i++){\n        derivative -= i * cashFlows[i] / Math.pow(1 + rate, i + 1);\n    }\n    return derivative;\n}\nfunction calculateSimpleIRR(cashFlows, equity, analysisTerm = 5) {\n    // Simple IRR approximation based on total return\n    const totalCashFlow = cashFlows.reduce((sum, cf)=>sum + cf, 0);\n    const totalReturn = totalCashFlow + equity;\n    if (totalReturn <= 0) {\n        return 0.05 // 5% if no positive return\n        ;\n    }\n    // Simple approximation: assume average return over analysis term\n    const avgAnnualReturn = totalReturn / analysisTerm;\n    const simpleIRR = avgAnnualReturn / equity;\n    // Cap at reasonable levels\n    return Math.min(Math.max(simpleIRR, 0.05), 0.30);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/parseOM/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/xlsx","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/papaparse","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FparseOM%2Froute&page=%2Fapi%2FparseOM%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FparseOM%2Froute.ts&appDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cwesto%5COneDrive%5CDocuments%5CFirst%20Pass%20OM%20Reader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();